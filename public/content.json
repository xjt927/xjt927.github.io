[{"title":"Hexo博客异地同步版本管理","date":"2018-05-02T09:38:28.000Z","path":"/posts/130619fa/","text":"前言背景：一台电脑上已有一个在用的博客，又新用了一台电脑，实现原电脑和新电脑都可以提交更新博客，实现同步或者说博客的版本管理。 步骤： 在原电脑上操作，给 username.github.io 博客仓库创建hexo分支，并设为默认分支。（具体可参考这篇文章的操作，有图示） 如果未给你的 github 账号添加过当前电脑生成的 ssh key，需要创建 ssh key 并添加到 github 账号上。（如何创建和添加 github help 就有） 随便一个目录下，命令行执行 git clone git@github.com:username/username.github.io.git 把仓库 clone 到本地。 显示所有隐藏文件和文件夹，进入刚才 clone 到本地的仓库，删掉除了 .git 文件夹以外的所有内容。 命令行 cd 到 clone 的仓库，git add -A ，git commit -m “–”，git push origin hexo，把刚才删除操作引起的本地仓库变化更新到远程，此时刷新下 github 端博客hexo分支，应该已经被清空了。 将上述 .git 文件夹复制到本机本地博客根目录下（即含有 themes、source 等文件夹的那个目录），现在可以把上述 clone 的本地仓库删掉了，因为它已经没有用了，本机博客目录已经变成可以和 hexo 分支相连的仓库了。 将博客目录下 themes 文件夹下每个主题文件夹里面的 .git .gitignore 删掉。 cd 到博客目录，git add -A ，git commit -m “–”，git push origin hexo，将博客目录下所有文件更新到 hexo 分支。如果上一步没有删掉 .git .gitignore，主题文件夹下内容将传不上去。至此原电脑上的操作结束。 在新电脑上操作，先把新电脑上环境安装好，node.js、git、hexo，ssh key 也创建和添加好。 选好博客安装的目录， git clone git@github.com:username/username.github.io.git 。 cd 到博客目录，npm install、hexo g &amp;&amp; hexo s，安装依赖，生成和启动博客服务。正常的话，浏览器打开 localhost:4000 可以看到博客了。至此新电脑操作完毕。 以后无论在哪台电脑上，更新以及提交博客，依次执行，git pull，git add -A ，git commit -m “–”，git push origin hexo，hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 即可。 参考链接：hexo 博客同步管理及迁移 作者：容与链接：https://www.zhihu.com/question/21193762/answer/369050999来源：知乎著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://xuejiangtao.com/tags/Hexo/"}]},{"title":"Hexo - Next主题下设置Gitalk评论系统","date":"2018-05-02T02:16:17.000Z","path":"/posts/a3b6b471/","text":"前言本来不想写这篇博客的，网上有很多这样的教程，配置过程也很简。无奈我在配置过程中遇到几个坑，遂记录之。 什么GitHub OAuth OAuth（开放授权）是一个开放标准，允许用户让第三方应用访问该用户在某一网站上存储的私密的资源（如照片，视频，联系人列表），而无需将用户名和密码提供给第三方应用。 —- 百度百科 OAuth协议的认证和授权的过程如下： 用户打开我的博客后，我想要通过GitHub获取改用户的基本信息 在转跳到GitHub的授权页面后，用户同意我获取他的基本信息 博客获得GitHub提供的授权码，使用该授权码向GitHub申请一个令牌 GitHub对博客提供的授权码进行验证，验证无误后，发放一个令牌给博客端 博客端使用令牌，向GitHub获取用户信息 GitHub 确认令牌无误，返回给我基本的用户信息 Gitalk介绍Gitalk 是一个基于 Github Issue 和 Preact 开发的评论插件。 Gitalk地址：Gitalk项目地址 、Gitalk中文说明 、Gitalk在线示例 Gitalk特性 使用 Github 登录 支持多语言 [en, zh-CN, zh-TW, es-ES, fr, ru] 支持个人或组织 无干扰模式（设置 distractionFreeMode 为 true 开启） 快捷键提交评论 （cmd|ctrl + enter） Next主题下设置Gitalk注册一个新的OAuth应用程序 注册链接：https://github.com/settings/applications/new 参数说明： Application name： # 应用名称，随意 Homepage URL： # 网站URL，如https://xjt927.github.io Application description # 描述，随意 Authorization callback URL：# 网站URL，https://xjt927.github.io 注意： 如果你的Github Pages已经绑定了域名，这两个参数Homepage URL、Authorization callback URL需要写你自己的域名。 我的就是绑定域名的，注册结果如下： 注册成功后会得到Client ID、Client Secret 两个参数。 gitalk.swig新建/layout/_third-party/comments/gitalk.swig文件，并添加内容：12345678910111213141516&#123;% if page.comments &amp;&amp; theme.gitalk.enable %&#125; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;&gt; &lt;script src=&quot;https://unpkg.com/gitalk/dist/gitalk.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; var gitalk = new Gitalk(&#123; clientID: &apos;&#123;&#123; theme.gitalk.ClientID &#125;&#125;&apos;, clientSecret: &apos;&#123;&#123; theme.gitalk.ClientSecret &#125;&#125;&apos;, repo: &apos;&#123;&#123; theme.gitalk.repo &#125;&#125;&apos;, owner: &apos;&#123;&#123; theme.gitalk.githubID &#125;&#125;&apos;, admin: [&apos;&#123;&#123; theme.gitalk.adminUser &#125;&#125;&apos;], id: location.pathname, distractionFreeMode: &apos;&#123;&#123; theme.gitalk.distractionFreeMode &#125;&#125;&apos; &#125;) gitalk.render(&apos;gitalk-container&apos;) &lt;/script&gt;&#123;% endif %&#125; comments.swig修改/layout/_partials/comments.swig，文件最下面找到1234&#123;% elseif theme.valine.appid and theme.valine.appkey %&#125; &lt;div class=&quot;comments&quot; id=&quot;comments&quot;&gt; &lt;/div&gt;&#123;% endif %&#125; 在&lt;/div&gt;标签上添加内容如下：12&#123;% elseif theme.gitalk.enable %&#125; &lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt; 最后结果是这样滴：1234567 &#123;% elseif theme.valine.appid and theme.valine.appkey %&#125; &lt;div class=&quot;comments&quot; id=&quot;comments&quot;&gt; &lt;/div&gt; &#123;% elseif theme.gitalk.enable %&#125;&lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt; &#123;% endif %&#125; index.swig修改layout/_third-party/comments/index.swig，在最后一行添加内容：1&#123;% include &apos;gitalk.swig&apos; %&#125; gitalk.styl新建/source/css/_common/components/third-party/gitalk.styl文件，添加内容：1234.gt-header a, .gt-comments a, .gt-popup a border-bottom: none;.gt-container .gt-popup .gt-action.is--active:before top: 0.7em; third-party.styl修改/source/css/_common/components/third-party/third-party.styl，在最后一行上添加内容，引入样式：1@import &quot;gitalk&quot;; _config.yml在主题配置文件next/_config.yml中添加如下内容：1234567891011gitalk: enable: true githubID: 你的Github账号 # 例：xjt927 repo: 你的Github Pages项目名称 # 例：xjt927.github.io ClientID: 你的ClientID ClientSecret: 你的ClientSecret adminUser: 你的Github账号 #指定可初始化评论账户 perPage: 15 #每页多少个评论 pagerDirection: last #排序方式是从旧到新（first）还是从新到旧（last） createIssueManually: true #如果当前页面没有相应的 isssue ，且登录的用户属于 admin，则会自动创建 issue。如果设置为 true，则显示一个初始化页面，创建 issue 需要点击 init 按钮。 distractionFreeMode: true #是否启用快捷键(cmd|ctrl + enter) 提交评论. 到此已经配置完成了，使用hexo clean、hexo g、hexo s， 本地查看文章下面是否有github相关内容。 其他 每篇文章都需要github登录授权一下，才能在issues下生成评论，如果浏览器记住密码的话，只需要点开文章就可以。 hexo next 主题配置 gitalk 评论后无法初始化创建 issue 报错出现 Error: Validation Failed. 关于Gitalk其他问题","tags":[{"name":"hexo","slug":"hexo","permalink":"http://xuejiangtao.com/tags/hexo/"},{"name":"Gitalk","slug":"Gitalk","permalink":"http://xuejiangtao.com/tags/Gitalk/"}]},{"title":"Git报错：fatal: Not a git repository (or any of the parent directories): .git","date":"2018-05-02T00:57:26.000Z","path":"/posts/be93165a/","text":"前言在使用Git进行push，fetch等操作时，提示：fatal: Not a git repository (or any of the parent directories): .git 产生原因：一般是没有初始化git本地版本管理仓库，所以无法执行git命令 解决方法： 执行以下命令行: git init 再执行查看状态信息：git status","tags":[{"name":"Git","slug":"Git","permalink":"http://xuejiangtao.com/tags/Git/"}]},{"title":"T4模板创建Poco、Entity","date":"2018-04-30T05:25:02.000Z","path":"/posts/5e9ae70c/","text":"什么是T4模板？T4，即4个T开头的英文字母组合：Text Template Transformation Toolkit。 T4文本模板，即一种自定义规则的代码生成器。根据业务模型可生成任何形式的文本文件或供程序调用的字符串。（模型以适合于应用程序域的形式包含信息，并且可以在应用程序的生存期更改） VS本身只提供一套基于T4引擎的代码生成的执行环境，由下面程序集构成：Microsoft.VisualStudio.TextTemplating.10.0.dllMicrosoft.VisualStudio.TextTemplating.Interfaces.10.0.dllMicrosoft.VisualStudio.TextTemplating.Modeling.10.0.dllMicrosoft.VisualStudio.TextTemplating.VSHost.10.0.dll T4基本结构T4模板可以分为：指令块、文本块、控制块。 指令块 - 向文本模板化引擎提供关于如何生成转换代码和输出文件的一般指令。 文本块 - 直接复制到输出的内容。 控制块 - 向文本插入可变值并控制文本的条件或重复部件的程序代码，不能在控制块中嵌套控制块。 设计时模板和运行时模板T4文本模板分为：设计时模板和运行时模板 设计时模板（文本模板） 运行时模板（已预处理的文本模板） 关于T4的介绍，可以参考这篇文章《你必须懂的 T4 模板：深入浅出》 项目地址Github地址：PocoByT4 T4模板本文提供通过T4模板生成Poco、Entity，支持的数据库包括Oracle、MySql、SqlServer等数据库。 OrmLitePocoByT4是基于ServiceStack.OrmLite项目中的T4模板改写。PetaPocoByT4是基于PetaPoco项目的T4模板改写。 使用WPF开发的桌面程序XJT.Com.EntitySql为使用WPF开发的桌面程序，可以自动读取excel设计表，同时支持从数据库中读取表，生成实体。","tags":[{"name":"WPF","slug":"WPF","permalink":"http://xuejiangtao.com/tags/WPF/"},{"name":"C#","slug":"C","permalink":"http://xuejiangtao.com/tags/C/"},{"name":"T4","slug":"T4","permalink":"http://xuejiangtao.com/tags/T4/"},{"name":"Poco、Entity","slug":"Poco、Entity","permalink":"http://xuejiangtao.com/tags/Poco、Entity/"}]},{"title":"SmartQQ","date":"2018-04-28T09:01:16.000Z","path":"/posts/b26bcbc1/","text":"前言使用C#，WPF开发的SmartQQ桌面操作程序。使用Quartz.Net实现定时发送，定时功能不太完善，可以再扩展。 运行项目会请求SmartQQ获取登录二维码，用户用手机qq扫描下实现登录。登录成功后会记录cookie，下次登录先使用cookie，如果cookie失效，再弹出登录二维码。 登录成功后获取好友、群分组、讨论组。 使用：双击qq好友头像、群分组、讨论组，添加到发送列表。 设置定时发送。 项目地址：SmartQQ 扫码登录 登录成功 感谢https://github.com/TJYSunset/DumbQQhttps://github.com/ScienJus/smartqqhttps://github.com/MahApps/MahApps.Metro 以及感谢所有开源者的无私分享。 注意 该项目是兴趣使然开发的，其中参考了其他一些开源项目，在此谢他们。 我把好友qq、群消息等接收信息功能注释掉了，如果有需要你可以自己加上。 开发完成后没有经过严格测试，只是简单实现发送功能，如有问题请联系我，会尽量修改。","tags":[{"name":"SmartQQ","slug":"SmartQQ","permalink":"http://xuejiangtao.com/tags/SmartQQ/"},{"name":"WPF","slug":"WPF","permalink":"http://xuejiangtao.com/tags/WPF/"},{"name":"C#","slug":"C","permalink":"http://xuejiangtao.com/tags/C/"}]},{"title":"Hexo入门教程（五）-hexo+Github绑定域名","date":"2018-04-18T07:55:18.000Z","path":"/posts/431f0136/","text":"首先要有自己的域名，没有域名的可以去阿里云（万网）、godaddy上买，我在阿里云买的，比较实力比较强，也用阿里云的服务器。 一、Github、hexo配置 在github中找到自己的博客仓库，点击“Create new file”新建文件“CNAME”，注意文件名一定要大写，里面只写一行自己域名，域名前不要加http、www。 在本地hexo-&gt;source文件夹下，新建文本文件“CNAME”，同样名称大写，里面只加一行自己的域名，规则同上，域名前不要加http、www。这样做是因为，当使用hexo d推送到github上的时候会自动将github上的“CNAME”文件覆盖、删除掉，导致域名解析失败。 二、域名解析配置 首先在cmd下ping一下你的github pages，比如我的github地址：ping xjt927.github.io，得到地址为151.101.229.147。 登录阿里云找到“云解析DNS”，找到自己的域名点击后面的“解析设置”，首次进入会默认配置，如果没有特殊用处可以全部删除。点击右上角“添加解析”，添加两条记录如下： 等几分钟尝试打开自己的域名，自动跳转到github pages页面，到这里就成功了。","tags":[{"name":"hexo","slug":"hexo","permalink":"http://xuejiangtao.com/tags/hexo/"}]},{"title":"Hexo入门教程（四）-hexo部署到Github","date":"2018-04-18T07:54:18.000Z","path":"/posts/30e46490/","text":"Github Pages设置什么是Github Pages Github Pages 是 github 公司提供的免费的静态网站托管服务，用起来方便而且功能强大，不仅没有空间限制，还可以绑定自己的域名。在 https://pages.github.com/ 首页上可以看到很多用 Github Pages 托管的网站，很漂亮。另外很多非常著名的公司和项目也都用这种方式来搭建网站，如微软和 twitter 的网站，还有 谷歌的 Material Design 图标 网站。 每个帐号只能有一个仓库来存放个人主页，而且仓库的名字必须是username/username.github.io，这是特殊的命名约定。你可以通过http://username.github.io 来访问你的个人主页。 每一个github账户最多只能创建一个，这样可以直接使用域名访问仓库。 这里特别提醒一下，需要注意的个人主页的网站内容是在master分支下的。 Github Pages优缺点 Github Pages优点： 轻量级的博客系统，没有麻烦的配置 使用标记语言，比如Markdown 无需自己搭建服务器 根据Github的限制，对应的每个站有300MB空间 可以绑定自己的域名 Github Pages缺点： 使用Jekyll模板系统，相当于静态页发布，适合博客，文档介绍等。 动态程序的部分相当局限，比如没有评论，不过还好我们有解决方案。 基于Git，很多东西需要动手，不像Wordpress有强大的后台。 创建自己的Github Pages注册 GitHub访问：http://www.github.com/ 注册你的 username 和邮箱，邮箱十分重要，GitHub 上很多通知都是通过邮箱发送。 注册过程比较简单，详细也可以看： 一步步在 GitHub上创建博客主页 全系列 by pchou（推荐） 创建仓库新建一个名为你的用户名.github.io的仓库，比如说，如果你的github用户名是test，那么你就新建test.github.io的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 http://test.github.io 了，是不是很方便？ 几个注意的地方： 注册的邮箱一定要验证，否则不会成功； 仓库名字必须是：username.github.io，其中username是你的用户名； 创建成功后，以后你的博客所有代码都是放在这个仓库里啦。 创建SSH Key在windows系统下进入c盘，右键点击“Git Bash Here”，然后输入命令。 检查SSH keys的设置首先我们需要检查你电脑上现有的ssh key：$ cd ~/.ssh如果显示“No such file or directory”，跳到第三步，否则继续。 备份和移除原来的ssh key设置：因为已经存在key文件，所以需要备份旧的数据并删除： 12345$ lsconfig id_rsa id_rsa.pub known_hosts$ mkdir key_backup$ cp id_rsa* key_backup$ rm id_rsa* 生成新的SSH Key：输入下面的代码，你的邮箱地址，就可以生成新的key文件，我们只需要默认设置就好，所以当需要输入文件名的时候，回车就好。 1$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot; 输入命令回车后出现以下信息，直接回车：Generating public/private rsa key pair.Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;直接回车&gt; 注意 1: 此处的邮箱地址，你可以输入自己的邮箱地址； 注意 2: 此处的「-C」的是大写的「C」 然后系统会要你输入加密串（Passphrase），不想设置的默认回车就行：12Enter passphrase (empty for no passphrase):&lt;输入加密串&gt;Enter same passphrase again:&lt;再次输入加密串&gt; 这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。 注意：输入密码的时候没有 * 字样的，你直接输入就可以了。 生成.ssh文件中id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥。 添加SSH Key到GitHub：在本机设置 SSH Key 之后，需要添加到 GitHub上，以完成 SSH 链接的设置。 1、打开本地 id_rsa.pub 文件（ 参考地址 C:\\Documents and Settings\\Administrator.ssh\\id_rsa.pub）。此文件里面内容为刚才生成的密钥。如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。 2、登陆 GitHub 系统。点击右上角的 Account Settings—&gt;SSH and GPG keys —&gt; New SSH key 3、把你本地生成的密钥复制到里面（ key 文本框中）， 点击 Add SSH key 就ok了 4、添加 SSH Key 到 GitHub 测试可以输入下面的命令，看看设置是否成功，`git@GitHub.com` 的部分不要修改：1$ ssh -T git@GitHub.com 如果是下面的反馈： The authenticity of host ‘GitHub.com (207.97.227.239)’ can’t be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)? 不要紧张，输入 yes 就好，然后会看到： Hi userName! You’ve successfully authenticated, but GitHub does not provide shell access. 设置用户信息现在你已经可以通过 SSH 链接到 GitHub 了，还有一些个人信息需要完善的。 Git 会根据用户的名字和邮箱来记录提交。GitHub 也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字必须是你的真名，而不是GitHub的昵称。12$ git config --global user.name &quot;userName&quot;//用户名$ git config --global user.email &quot;youremail@example.com&quot;//填写自己的邮箱 SSH Key 配置成功本机已成功连接到 GitHub。 若有问题，请重新设置。常见错误请参考：GitHub Help - Generating SSH KeysGitHub Help - Error Permission denied (publickey) 上传到Github参考官方文档 部署 配置站点配置文件打开根目录下站点配置文件_config.yml，配置有关deploy的部分： 1234deploy: type: git repo: git@github.com:xjt927/xjt927.github.io.git branch: master 安装插件此时，直接使用hexo d部署到github，将出现如下错误：1ERROR Deployer not found: git 这是因为需要安装如下插件：1$ npm install hexo-deployer-git --save 部署到github 注意： 如果安装git客户端的时候没有勾选git命令在bash和cmd命令都有效，若是在cmd命令下则因为没有将git添加到windows的path，所以会出现错误，一般可以尝试在blog的目录右键选Git Bath here再尝试hexo d。 执行hexo d后报错：fatal: Not a git repository (or any of the parent directories): .git解决： 把hexo文件夹下的.deploy_git文件夹删掉，重新编译、发布。 hexo d之后等运行完毕，打开github仓库看到文件已经推送过来了，这时打开https://你的用户名.github.io/，会发现新写的文章已经生成，则表示部署到github成功。 hexo主题设置hexo官方主题文档中介绍了怎样创建主题，并给出了hexo主题列表，从中挑选喜欢的主题。对于前端不熟的我，只能参考使用现成的主题了，这是我使用一套的主题——hexo-theme-tomotoes，记录一下使用步骤。 安装 配置 在参考安装配置“标签页”，“分类页”，“关于页”的设置时，将其给出的配置放到文件头三道杠“—”中间，可以是“date”下面位置。如about页面的配置： 1234567---title: aboutdate: 2018-04-18 14:54:10layout: aboutcomments: truereward: false--- 在设置“themes\\tomotoes\\_config.yml”主题配置文件时，文章截断要设置为excerpt_render: false，才能在首页截断文章。 12mymotto: #关闭一言将true和false都清空即可 content: Just Do It! 新建文章之后，在文件头部写上tags、categories字段，分别对应网站的标签、分类菜单列表，例如： 1234567---title: testabbrlink: d87f7e0cdate: 2018-04-18 15:51:18tags: 测试标签categories: 测试分类--- 设置完成后使用hexo c、hexo g等命令，如果报如下错误，说明在配置文件_config.yml的87行前面有空格，删掉空格即可。 123FATAL bad indentation of a mapping entry at line 87, column 2: feed: ^ 打开“themes\\tomotoes\\layout\\_partial\\post\\updated.ejs”，修改(&#39;post.last_updated&#39;)为(&#39;最后更新：&#39;)，用于文章下面的提示信息。 打开“themes\\tomotoes\\layout\\_partial\\index-item.ejs”第21行处，将&lt;%= __(&#39;post.continue_reading&#39;) %&gt;设置为&lt;%= __(&#39;全文阅读&#39;) %&gt;。 参考资料： Hexo官方文档 如何搭建一个独立博客——简明Github Pages与Hexo教程 【Hexo搭建独立博客全纪录】（三）使用Hexo搭建博客 使用hexo+github搭建免费个人博客详细教程","tags":[{"name":"hexo","slug":"hexo","permalink":"http://xuejiangtao.com/tags/hexo/"}]},{"title":"Hexo入门教程（三）-hexo新建文章&发布文章","date":"2018-04-18T07:53:18.000Z","path":"/posts/fbe5044a/","text":"新建文章使用cmd进入hexo网站按照目录下，在命令行中输入以下命令： hexo new [layout] &lt;title&gt; [layout] 为指定文章的布局（layout），默认为 post，可以通过修改 _config.yml 中的 default_layout 参数来指定默认布局。 [layout] 可以不用写，不写就是默认布局。hexo new &lt;title&gt; &lt;title&gt; 为你要创建的文章标题。 之后在 source/_posts 目录下面，多了一个&lt;title&gt;.md 的文件。 布局（Layout）Hexo 有三种默认布局：post、page 和 draft，它们分别对应不同的路径，而您自定义的其他布局和 post 相同，都将储存到 source/_posts 文件夹。 布局 路径 post source/_posts page source draft source/_drafts 创建草稿草稿文件的创建命令如下： hexo new draft &lt;title&gt; 创建的文件会被保存到source/_drafts文件夹，如果有文章没写完或不想发布的，可以放到drafts文件夹下。 预览草稿草稿默认不会显示在页面中，有两种方式可以预览草稿。 在执行 hexo g 命令时加上 --draft 参数。 hexo s --draft 在 _config.yml 文件中把 render_drafts 参数设为 true 。 render_drafts: true 草稿文章 转 发布文章使用 publish 命令将草稿移动到 source/_posts 文件夹，该命令的使用方式与 new 十分类似，您也可在命令中指定 layout 来指定布局，草稿发布后_drafts目录下的草稿会同时删除。 hexo publish [layout] &lt;title&gt; Hexo没有提供将草稿全部发布到_post目录，可以使用hexo publish .来发布，不过偶尔报错。 模版（Scaffold）在新建文章时，Hexo 会根据 scaffolds 文件夹内相对应的文件来建立文件，例如： hexo new photo &quot;My Gallery&quot; 在执行这行指令时，Hexo 会尝试在 scaffolds 文件夹中寻找 photo.md，并根据其内容建立文章，以下是您可以在模版中使用的变量： 变量 描述 layout 布局 title 标题 date 文件建立日期","tags":[{"name":"hexo","slug":"hexo","permalink":"http://xuejiangtao.com/tags/hexo/"}]},{"title":"Hexo入门教程（二）-hexo网站目录机构介绍","date":"2018-04-18T07:52:18.000Z","path":"/posts/c0129f56/","text":"继上一篇介绍hexo如何搭建，来了解一下hexo网站的目录结构。.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes _config.yml网站的 配置 信息，您可以在此配置大部分的参数。package.json应用程序的信息。 scaffolds模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。 Hexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。 source资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。 themes主题 文件夹。Hexo 会根据主题来生成静态页面。 public使用 hexo g 命令生成的静态页面文件。","tags":[{"name":"hexo","slug":"hexo","permalink":"http://xuejiangtao.com/tags/hexo/"}]},{"title":"Hexo入门教程（一）-hexo安装","date":"2018-04-18T07:51:18.000Z","path":"/posts/3523a191/","text":"hexo有官方文档，本文只记录自己搭建hexo博客的过程。 先检查电脑是否安装NodeJs和Git 查看nodejs：node -vnpm -v 检查git在文件夹空白处右键，如果出现以下图片表明安装成功。 安装NodeJs下载并安装nodejs官方下载地址：https://nodejs.org/en/download/中文下载地址：http://nodejs.cn/download/具体nodejs安装可参考 Node.js 安装配置 安装Git下载并安装Git下载地址 https://git-scm.com/downloads具体Git安装可参考 Git 安装配置 安装Hexo框架使用npm命令安装Hexo框架，进入cmd命令然后输入：npm install -g hexo-cli 创建Hexo网站使用npm命令安装Hexo网站所需的文件，依次输入：hexo init &lt;folder&gt;cd &lt;folder&gt;npm install &lt;folder&gt; 为你要安装hexo的路径如果没有设置 folder ，Hexo默认在目前的文件夹建立网站。新建完成后，指定文件夹的目录如下：.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 到这里Hexo已经安装成功了，使用cmd命令cd进入刚才创建的hexo文件夹，分别执行以下命令：hexo ghexo c命令简写hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章hexo g == hexo generate #生成hexo s == hexo server #启动服务预览hexo d == hexo deploy #部署完成后，打开浏览器输入地址：localhost:4000可以看到默认网站样式","tags":[{"name":"hexo","slug":"hexo","permalink":"http://xuejiangtao.com/tags/hexo/"}]}]
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Just Do It!</title>
  <icon>https://www.gravatar.com/avatar/e09c882a79914acba90f05aba2aeea2c</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xuejiangtao.com/"/>
  <updated>2018-05-02T12:15:48.000Z</updated>
  <id>http://xuejiangtao.com/</id>
  
  <author>
    <name>薛江涛</name>
    <email>xjt927@126.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo博客异地同步版本管理</title>
    <link href="http://xuejiangtao.com//posts/130619fa/"/>
    <id>http://xuejiangtao.com//posts/130619fa/</id>
    <published>2018-05-02T09:38:28.000Z</published>
    <updated>2018-05-02T12:15:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>背景：一台电脑上已有一个在用的博客，又新用了一台电脑，实现原电脑和新电脑都可以提交更新博客，实现同步或者说博客的版本管理。<br><a id="more"></a></p><h1 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h1><ol><li>在原电脑上操作，给 username.github.io 博客仓库创建hexo分支，并设为默认分支。（具体可参考这篇文章的操作，有图示）</li><li>如果未给你的 github 账号添加过当前电脑生成的 ssh key，需要创建 ssh key 并添加到 github 账号上。（如何创建和添加 github help 就有）</li><li>随便一个目录下，命令行执行 git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:username/username.github.io.git 把仓库 clone 到本地。</li><li>显示所有隐藏文件和文件夹，进入刚才 clone 到本地的仓库，删掉除了 .git 文件夹以外的所有内容。</li><li>命令行 cd 到 clone 的仓库，git add -A ，git commit -m “–”，git push origin hexo，把刚才删除操作引起的本地仓库变化更新到远程，此时刷新下 github 端博客hexo分支，应该已经被清空了。</li><li>将上述 .git 文件夹复制到本机本地博客根目录下（即含有 themes、source 等文件夹的那个目录），现在可以把上述 clone 的本地仓库删掉了，因为它已经没有用了，本机博客目录已经变成可以和 hexo 分支相连的仓库了。</li><li>将博客目录下 themes 文件夹下每个主题文件夹里面的 .git .gitignore 删掉。 </li><li>cd 到博客目录，git add -A ，git commit -m “–”，git push origin hexo，将博客目录下所有文件更新到 hexo 分支。如果上一步没有删掉 .git .gitignore，主题文件夹下内容将传不上去。至此原电脑上的操作结束。</li><li>在新电脑上操作，先把新电脑上环境安装好，node.js、git、hexo，ssh key 也创建和添加好。</li><li>选好博客安装的目录， git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:username/username.github.io.git 。</li><li>cd 到博客目录，npm install、hexo g &amp;&amp; hexo s，安装依赖，生成和启动博客服务。正常的话，浏览器打开 localhost:4000 可以看到博客了。至此新电脑操作完毕。</li><li>以后无论在哪台电脑上，更新以及提交博客，依次执行，git pull，git add -A ，git commit -m “–”，git push origin hexo，hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 即可。</li></ol><p>参考链接：<a href="https://link.zhihu.com/?target=https%3A//www.jianshu.com/p/fceaf373d797" target="_blank" rel="noopener">hexo 博客同步管理及迁移</a></p><p>作者：容与<br>链接：<a href="https://www.zhihu.com/question/21193762/answer/369050999" target="_blank" rel="noopener">https://www.zhihu.com/question/21193762/answer/369050999</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;背景：一台电脑上已有一个在用的博客，又新用了一台电脑，实现原电脑和新电脑都可以提交更新博客，实现同步或者说博客的版本管理。&lt;br&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://xuejiangtao.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://xuejiangtao.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo - Next主题下设置Gitalk评论系统</title>
    <link href="http://xuejiangtao.com//posts/a3b6b471/"/>
    <id>http://xuejiangtao.com//posts/a3b6b471/</id>
    <published>2018-05-02T02:16:17.000Z</published>
    <updated>2018-05-02T12:23:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本来不想写这篇博客的，网上有很多这样的教程，配置过程也很简。无奈我在配置过程中遇到几个坑，遂记录之。</p><h1 id="什么GitHub-OAuth"><a href="#什么GitHub-OAuth" class="headerlink" title="什么GitHub OAuth"></a>什么GitHub OAuth</h1><blockquote><p>OAuth（开放授权）是一个开放标准，允许用户让第三方应用访问该用户在某一网站上存储的私密的资源（如照片，视频，联系人列表），而无需将用户名和密码提供给第三方应用。 —- 百度百科</p></blockquote><p>OAuth协议的认证和授权的过程如下：</p><ul><li>用户打开我的博客后，我想要通过GitHub获取改用户的基本信息</li><li>在转跳到GitHub的授权页面后，用户同意我获取他的基本信息</li><li>博客获得GitHub提供的授权码，使用该授权码向GitHub申请一个令牌</li><li>GitHub对博客提供的授权码进行验证，验证无误后，发放一个令牌给博客端</li><li>博客端使用令牌，向GitHub获取用户信息</li><li>GitHub 确认令牌无误，返回给我基本的用户信息<a id="more"></a></li></ul><h1 id="Gitalk介绍"><a href="#Gitalk介绍" class="headerlink" title="Gitalk介绍"></a>Gitalk介绍</h1><p>Gitalk 是一个基于 Github Issue 和 Preact 开发的评论插件。</p><h2 id="Gitalk地址："><a href="#Gitalk地址：" class="headerlink" title="Gitalk地址："></a>Gitalk地址：</h2><p><a href="https://github.com/gitalk/gitalk" target="_blank" rel="noopener">Gitalk项目地址</a> 、<a href="https://github.com/gitalk/gitalk/blob/master/readme-cn.md" target="_blank" rel="noopener">Gitalk中文说明</a> 、<a href="https://gitalk.github.io/" target="_blank" rel="noopener">Gitalk在线示例</a></p><h2 id="Gitalk特性"><a href="#Gitalk特性" class="headerlink" title="Gitalk特性"></a>Gitalk特性</h2><ul><li>使用 Github 登录</li><li>支持多语言 [en, zh-CN, zh-TW, es-ES, fr, ru]</li><li>支持个人或组织</li><li>无干扰模式（设置 distractionFreeMode 为 true 开启）</li><li>快捷键提交评论 （cmd|ctrl + enter）</li></ul><h1 id="Next主题下设置Gitalk"><a href="#Next主题下设置Gitalk" class="headerlink" title="Next主题下设置Gitalk"></a>Next主题下设置Gitalk</h1><h2 id="注册一个新的OAuth应用程序"><a href="#注册一个新的OAuth应用程序" class="headerlink" title="注册一个新的OAuth应用程序"></a>注册一个新的OAuth应用程序</h2><p>   注册链接：<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">https://github.com/settings/applications/new</a><br><img src="https://github.com/xjt927/filerepository/blob/master/SMRVW%5DJ8IXU%60AR%60%7DXR@L6%25W.png?raw=true" width="500"></p><h2 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h2><ul><li>Application name： # 应用名称，随意</li><li>Homepage URL： # 网站URL，如<a href="https://xjt927.github.io" target="_blank" rel="noopener">https://xjt927.github.io</a></li><li>Application description # 描述，随意</li><li>Authorization callback URL：# 网站URL，<a href="https://xjt927.github.io" target="_blank" rel="noopener">https://xjt927.github.io</a></li></ul><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a><strong>注意：</strong></h2><blockquote><p>如果你的<code>Github Pages</code>已经绑定了域名，这两个参数<code>Homepage URL</code>、<code>Authorization callback URL</code>需要写你自己的域名。</p></blockquote><p>我的就是绑定域名的，注册结果如下：<br><img src="https://github.com/xjt927/filerepository/blob/master/%7B%5BR8LMB%6028%25@90IVJBHEPMN.png?raw=true" width="500"></p><p>注册成功后会得到<code>Client ID</code>、<code>Client Secret</code> 两个参数。<br><img src="https://github.com/xjt927/filerepository/blob/master/%256HKBTCK%7DD%7B%5BS%7BBBL~G%2570L.png?raw=true" width="500"></p><h2 id="gitalk-swig"><a href="#gitalk-swig" class="headerlink" title="gitalk.swig"></a>gitalk.swig</h2><p>新建/layout/_third-party/comments/gitalk.swig文件，并添加内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if page.comments &amp;&amp; theme.gitalk.enable %&#125;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;&gt;</span><br><span class="line">  &lt;script src=&quot;https://unpkg.com/gitalk/dist/gitalk.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        var gitalk = new Gitalk(&#123;</span><br><span class="line">          clientID: &apos;&#123;&#123; theme.gitalk.ClientID &#125;&#125;&apos;,</span><br><span class="line">          clientSecret: &apos;&#123;&#123; theme.gitalk.ClientSecret &#125;&#125;&apos;,</span><br><span class="line">          repo: &apos;&#123;&#123; theme.gitalk.repo &#125;&#125;&apos;,</span><br><span class="line">          owner: &apos;&#123;&#123; theme.gitalk.githubID &#125;&#125;&apos;,</span><br><span class="line">          admin: [&apos;&#123;&#123; theme.gitalk.adminUser &#125;&#125;&apos;],</span><br><span class="line">          id: location.pathname,</span><br><span class="line">          distractionFreeMode: &apos;&#123;&#123; theme.gitalk.distractionFreeMode &#125;&#125;&apos;</span><br><span class="line">        &#125;)</span><br><span class="line">        gitalk.render(&apos;gitalk-container&apos;)           </span><br><span class="line">       &lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p><h2 id="comments-swig"><a href="#comments-swig" class="headerlink" title="comments.swig"></a>comments.swig</h2><p>修改/layout/_partials/comments.swig，文件最下面找到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% elseif theme.valine.appid and theme.valine.appkey %&#125;</span><br><span class="line">  &lt;div class=&quot;comments&quot; id=&quot;comments&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p><p>在<code>&lt;/div&gt;</code>标签上添加内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% elseif theme.gitalk.enable %&#125;</span><br><span class="line"> &lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>最后结果是这样滴：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> &#123;% elseif theme.valine.appid and theme.valine.appkey %&#125;</span><br><span class="line">   &lt;div class=&quot;comments&quot; id=&quot;comments&quot;&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"> &#123;% elseif theme.gitalk.enable %&#125;</span><br><span class="line">&lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt;</span><br><span class="line"> &#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p><h2 id="index-swig"><a href="#index-swig" class="headerlink" title="index.swig"></a>index.swig</h2><p>修改layout/_third-party/comments/index.swig，在最后一行添加内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include &apos;gitalk.swig&apos; %&#125;</span><br></pre></td></tr></table></figure></p><h2 id="gitalk-styl"><a href="#gitalk-styl" class="headerlink" title="gitalk.styl"></a>gitalk.styl</h2><p>新建/source/css/_common/components/third-party/gitalk.styl文件，添加内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.gt-header a, .gt-comments a, .gt-popup a</span><br><span class="line">  border-bottom: none;</span><br><span class="line">.gt-container .gt-popup .gt-action.is--active:before</span><br><span class="line">  top: 0.7em;</span><br></pre></td></tr></table></figure></p><h2 id="third-party-styl"><a href="#third-party-styl" class="headerlink" title="third-party.styl"></a>third-party.styl</h2><p>修改/source/css/_common/components/third-party/third-party.styl，在最后一行上添加内容，引入样式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import &quot;gitalk&quot;;</span><br></pre></td></tr></table></figure></p><h2 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h2><p>在主题配置文件next/_config.yml中添加如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gitalk:</span><br><span class="line">  enable: true</span><br><span class="line">  githubID: 你的Github账号  # 例：xjt927   </span><br><span class="line">  repo: 你的Github Pages项目名称   # 例：xjt927.github.io</span><br><span class="line">  ClientID: 你的ClientID</span><br><span class="line">  ClientSecret: 你的ClientSecret</span><br><span class="line">  adminUser: 你的Github账号 #指定可初始化评论账户</span><br><span class="line">  perPage: 15 #每页多少个评论</span><br><span class="line">  pagerDirection: last  #排序方式是从旧到新（first）还是从新到旧（last）</span><br><span class="line">  createIssueManually: true #如果当前页面没有相应的 isssue ，且登录的用户属于 admin，则会自动创建 issue。如果设置为 true，则显示一个初始化页面，创建 issue 需要点击 init 按钮。</span><br><span class="line">  distractionFreeMode: true #是否启用快捷键(cmd|ctrl + enter) 提交评论.</span><br></pre></td></tr></table></figure></p><p>到此已经配置完成了，使用<code>hexo clean</code>、<code>hexo g</code>、<code>hexo s</code>， 本地查看文章下面是否有github相关内容。</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ol><li>每篇文章都需要github登录授权一下，才能在<code>issues</code>下生成评论，如果浏览器记住密码的话，只需要点开文章就可以。</li><li><a href="https://github.com/gitalk/gitalk/issues/115" target="_blank" rel="noopener">hexo next 主题配置 gitalk 评论后无法初始化创建 issue</a></li><li><a href="https://github.com/gitalk/gitalk/issues/102" target="_blank" rel="noopener">报错出现 Error: Validation Failed.</a> </li><li><a href="https://github.com/gitalk/gitalk/issues" target="_blank" rel="noopener">关于Gitalk其他问题</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;本来不想写这篇博客的，网上有很多这样的教程，配置过程也很简。无奈我在配置过程中遇到几个坑，遂记录之。&lt;/p&gt;
&lt;h1 id=&quot;什么GitHub-OAuth&quot;&gt;&lt;a href=&quot;#什么GitHub-OAuth&quot; class=&quot;headerlink&quot; title=&quot;什么GitHub OAuth&quot;&gt;&lt;/a&gt;什么GitHub OAuth&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;OAuth（开放授权）是一个开放标准，允许用户让第三方应用访问该用户在某一网站上存储的私密的资源（如照片，视频，联系人列表），而无需将用户名和密码提供给第三方应用。 —- 百度百科&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;OAuth协议的认证和授权的过程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户打开我的博客后，我想要通过GitHub获取改用户的基本信息&lt;/li&gt;
&lt;li&gt;在转跳到GitHub的授权页面后，用户同意我获取他的基本信息&lt;/li&gt;
&lt;li&gt;博客获得GitHub提供的授权码，使用该授权码向GitHub申请一个令牌&lt;/li&gt;
&lt;li&gt;GitHub对博客提供的授权码进行验证，验证无误后，发放一个令牌给博客端&lt;/li&gt;
&lt;li&gt;博客端使用令牌，向GitHub获取用户信息&lt;/li&gt;
&lt;li&gt;GitHub 确认令牌无误，返回给我基本的用户信息
    
    </summary>
    
      <category term="hexo" scheme="http://xuejiangtao.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://xuejiangtao.com/tags/hexo/"/>
    
      <category term="Gitalk" scheme="http://xuejiangtao.com/tags/Gitalk/"/>
    
  </entry>
  
  <entry>
    <title>Git报错：fatal: Not a git repository (or any of the parent directories): .git</title>
    <link href="http://xuejiangtao.com//posts/be93165a/"/>
    <id>http://xuejiangtao.com//posts/be93165a/</id>
    <published>2018-05-02T00:57:26.000Z</published>
    <updated>2018-05-02T12:14:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在使用Git进行<code>push</code>，<code>fetch</code>等操作时，提示：<br><code>fatal: Not a git repository (or any of the parent directories): .git</code></p><h1 id="产生原因："><a href="#产生原因：" class="headerlink" title="产生原因："></a>产生原因：</h1><p>一般是没有初始化git本地版本管理仓库，所以无法执行git命令<br><a id="more"></a></p><h1 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h1><ol><li>执行以下命令行: <code>git init</code></li><li>再执行查看状态信息：<code>git status</code></li></ol><p><img src="https://github.com/xjt927/filerepository/blob/master/2G$%5BOZ~U@7%5B7VGHBJULHNCO.png?raw=true" height="300"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在使用Git进行&lt;code&gt;push&lt;/code&gt;，&lt;code&gt;fetch&lt;/code&gt;等操作时，提示：&lt;br&gt;&lt;code&gt;fatal: Not a git repository (or any of the parent directories): .git&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;产生原因：&quot;&gt;&lt;a href=&quot;#产生原因：&quot; class=&quot;headerlink&quot; title=&quot;产生原因：&quot;&gt;&lt;/a&gt;产生原因：&lt;/h1&gt;&lt;p&gt;一般是没有初始化git本地版本管理仓库，所以无法执行git命令&lt;br&gt;
    
    </summary>
    
      <category term="Git" scheme="http://xuejiangtao.com/categories/Git/"/>
    
    
      <category term="Git" scheme="http://xuejiangtao.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>T4模板创建Poco、Entity</title>
    <link href="http://xuejiangtao.com//posts/5e9ae70c/"/>
    <id>http://xuejiangtao.com//posts/5e9ae70c/</id>
    <published>2018-04-30T05:25:02.000Z</published>
    <updated>2018-05-02T12:22:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是T4模板？"><a href="#什么是T4模板？" class="headerlink" title="什么是T4模板？"></a>什么是T4模板？</h1><p>T4，即4个T开头的英文字母组合：Text Template Transformation Toolkit。</p><p>T4文本模板，即一种自定义规则的代码生成器。根据业务模型可生成任何形式的文本文件或供程序调用的字符串。（模型以适合于应用程序域的形式包含信息，并且可以在应用程序的生存期更改）</p><p>VS本身只提供一套基于T4引擎的代码生成的执行环境，由下面程序集构成：<br>Microsoft.VisualStudio.TextTemplating.10.0.dll<br>Microsoft.VisualStudio.TextTemplating.Interfaces.10.0.dll<br>Microsoft.VisualStudio.TextTemplating.Modeling.10.0.dll<br>Microsoft.VisualStudio.TextTemplating.VSHost.10.0.dll<br><a id="more"></a></p><h1 id="T4基本结构"><a href="#T4基本结构" class="headerlink" title="T4基本结构"></a>T4基本结构</h1><p>T4模板可以分为：指令块、文本块、控制块。</p><ol><li>指令块 - 向文本模板化引擎提供关于如何生成转换代码和输出文件的一般指令。</li><li>文本块 - 直接复制到输出的内容。</li><li>控制块 - 向文本插入可变值并控制文本的条件或重复部件的程序代码，不能在控制块中嵌套控制块。 </li></ol><h1 id="设计时模板和运行时模板"><a href="#设计时模板和运行时模板" class="headerlink" title="设计时模板和运行时模板"></a>设计时模板和运行时模板</h1><p>T4文本模板分为：设计时模板和运行时模板</p><ol><li>设计时模板（文本模板）</li><li>运行时模板（已预处理的文本模板）   </li></ol><p>关于T4的介绍，可以参考这篇文章《<a href="http://www.cnblogs.com/heyuquan/archive/2012/07/26/2610959.html" target="_blank" rel="noopener">你必须懂的 T4 模板：深入浅出</a>》</p><h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h1><p>Github地址：<a href="https://github.com/xjt927/PocoByT4" target="_blank" rel="noopener">PocoByT4</a></p><h2 id="T4模板"><a href="#T4模板" class="headerlink" title="T4模板"></a>T4模板</h2><p>本文提供通过T4模板生成Poco、Entity，支持的数据库包括Oracle、MySql、SqlServer等数据库。</p><p><code>OrmLitePocoByT4</code>是基于<a href="https://github.com/ServiceStack/ServiceStack.OrmLite" target="_blank" rel="noopener">ServiceStack.OrmLite</a>项目中的T4模板改写。<br><code>PetaPocoByT4</code>是基于<a href="https://github.com/CollaboratingPlatypus/PetaPoco" target="_blank" rel="noopener">PetaPoco</a>项目的T4模板改写。</p><h2 id="使用WPF开发的桌面程序"><a href="#使用WPF开发的桌面程序" class="headerlink" title="使用WPF开发的桌面程序"></a>使用WPF开发的桌面程序</h2><p><code>XJT.Com.EntitySql</code>为使用WPF开发的桌面程序，可以自动读取excel设计表，同时支持从数据库中读取表，生成实体。</p><p><img src="https://github.com/xjt927/filerepository/blob/master/1525052216(1).jpg?raw=true" height="400"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是T4模板？&quot;&gt;&lt;a href=&quot;#什么是T4模板？&quot; class=&quot;headerlink&quot; title=&quot;什么是T4模板？&quot;&gt;&lt;/a&gt;什么是T4模板？&lt;/h1&gt;&lt;p&gt;T4，即4个T开头的英文字母组合：Text Template Transformation Toolkit。&lt;/p&gt;
&lt;p&gt;T4文本模板，即一种自定义规则的代码生成器。根据业务模型可生成任何形式的文本文件或供程序调用的字符串。（模型以适合于应用程序域的形式包含信息，并且可以在应用程序的生存期更改）&lt;/p&gt;
&lt;p&gt;VS本身只提供一套基于T4引擎的代码生成的执行环境，由下面程序集构成：&lt;br&gt;Microsoft.VisualStudio.TextTemplating.10.0.dll&lt;br&gt;Microsoft.VisualStudio.TextTemplating.Interfaces.10.0.dll&lt;br&gt;Microsoft.VisualStudio.TextTemplating.Modeling.10.0.dll&lt;br&gt;Microsoft.VisualStudio.TextTemplating.VSHost.10.0.dll&lt;br&gt;
    
    </summary>
    
      <category term="WPF" scheme="http://xuejiangtao.com/categories/WPF/"/>
    
    
      <category term="T4" scheme="http://xuejiangtao.com/tags/T4/"/>
    
      <category term="Poco、Entity" scheme="http://xuejiangtao.com/tags/Poco%E3%80%81Entity/"/>
    
      <category term="WPF" scheme="http://xuejiangtao.com/tags/WPF/"/>
    
      <category term="C#" scheme="http://xuejiangtao.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>SmartQQ</title>
    <link href="http://xuejiangtao.com//posts/b26bcbc1/"/>
    <id>http://xuejiangtao.com//posts/b26bcbc1/</id>
    <published>2018-04-28T09:01:16.000Z</published>
    <updated>2018-05-02T12:21:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用C#，WPF开发的SmartQQ桌面操作程序。使用Quartz.Net实现定时发送，定时功能不太完善，可以再扩展。</p><ol><li>运行项目会请求SmartQQ获取登录二维码，用户用手机qq扫描下实现登录。<br><strong>登录成功后会记录cookie，下次登录先使用cookie，如果cookie失效，再弹出登录二维码。</strong></li><li>登录成功后获取好友、群分组、讨论组。</li><li>使用：双击qq好友头像、群分组、讨论组，添加到发送列表。</li><li>设置定时发送。<a id="more"></a><h1 id="项目地址："><a href="#项目地址：" class="headerlink" title="项目地址："></a>项目地址：</h1><a href="https://github.com/xjt927/SmartQQ" target="_blank" rel="noopener">SmartQQ</a></li></ol><h1 id="扫码登录"><a href="#扫码登录" class="headerlink" title="扫码登录"></a>扫码登录</h1><div><br><img src="https://github.com/xjt927/SmartQQ/blob/master/%E8%AF%B4%E6%98%8E%E5%9B%BE%E7%89%87/TIM%E6%88%AA%E5%9B%BE20180320174033.jpg?raw=true" height="300"><br><img src="https://github.com/xjt927/SmartQQ/blob/master/%E8%AF%B4%E6%98%8E%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180320174303.jpg?raw=true" height="400"><br></div>  <h1 id="登录成功"><a href="#登录成功" class="headerlink" title="登录成功"></a>登录成功</h1><p><img src="https://github.com/xjt927/SmartQQ/blob/master/%E8%AF%B4%E6%98%8E%E5%9B%BE%E7%89%87/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20180320175816.png?raw=true" height="400"> </p><h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p><a href="https://github.com/TJYSunset/DumbQQ" target="_blank" rel="noopener">https://github.com/TJYSunset/DumbQQ</a><br><a href="https://github.com/ScienJus/smartqq" target="_blank" rel="noopener">https://github.com/ScienJus/smartqq</a><br><a href="https://github.com/MahApps/MahApps.Metro" target="_blank" rel="noopener">https://github.com/MahApps/MahApps.Metro</a><br> <strong>以及感谢所有开源者的无私分享。</strong></p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul><li>该项目是兴趣使然开发的，其中参考了其他一些开源项目，在此谢他们。  </li><li>我把好友qq、群消息等接收信息功能注释掉了，如果有需要你可以自己加上。</li><li>开发完成后没有经过严格测试，只是简单实现发送功能，如有问题请联系我，会尽量修改。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;使用C#，WPF开发的SmartQQ桌面操作程序。使用Quartz.Net实现定时发送，定时功能不太完善，可以再扩展。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;运行项目会请求SmartQQ获取登录二维码，用户用手机qq扫描下实现登录。&lt;br&gt;&lt;strong&gt;登录成功后会记录cookie，下次登录先使用cookie，如果cookie失效，再弹出登录二维码。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;登录成功后获取好友、群分组、讨论组。&lt;/li&gt;
&lt;li&gt;使用：双击qq好友头像、群分组、讨论组，添加到发送列表。&lt;/li&gt;
&lt;li&gt;设置定时发送。
    
    </summary>
    
      <category term="WPF" scheme="http://xuejiangtao.com/categories/WPF/"/>
    
    
      <category term="WPF" scheme="http://xuejiangtao.com/tags/WPF/"/>
    
      <category term="C#" scheme="http://xuejiangtao.com/tags/C/"/>
    
      <category term="SmartQQ" scheme="http://xuejiangtao.com/tags/SmartQQ/"/>
    
  </entry>
  
  <entry>
    <title>Hexo入门教程（五）-hexo+Github绑定域名</title>
    <link href="http://xuejiangtao.com//posts/431f0136/"/>
    <id>http://xuejiangtao.com//posts/431f0136/</id>
    <published>2018-04-18T07:55:18.000Z</published>
    <updated>2018-05-02T12:18:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先要有自己的域名，没有域名的可以去<a href="https://wanwang.aliyun.com/domain/?spm=5176.200001.n2.14.nkOQu9" target="_blank" rel="noopener">阿里云（万网）</a>、<a href="https://www.godaddy.com/" target="_blank" rel="noopener">godaddy</a>上买，我在阿里云买的，比较实力比较强，也用阿里云的服务器。</p><h2 id="一、Github、hexo配置"><a href="#一、Github、hexo配置" class="headerlink" title="一、Github、hexo配置"></a>一、Github、hexo配置</h2><ol><li><p>在github中找到自己的博客仓库，点击“Create new file”新建文件“CNAME”，注意文件名一定要大写，里面只写一行自己域名，域名前不要加http、www。<br><img src="https://github.com/xjt927/filerepository/blob/master/0~%60JL6F%606J067_5BUPTJMO1.png?raw=true" width="700"> </p></li><li><p>在本地hexo-&gt;source文件夹下，新建文本文件“CNAME”，同样名称大写，里面只加一行自己的域名，规则同上，域名前不要加http、www。<br>这样做是因为，当使用<code>hexo d</code>推送到github上的时候会自动将github上的“CNAME”文件覆盖、删除掉，导致域名解析失败。</p><a id="more"></a><h2 id="二、域名解析配置"><a href="#二、域名解析配置" class="headerlink" title="二、域名解析配置"></a>二、域名解析配置</h2></li><li>首先在cmd下ping一下你的github pages，比如我的github地址：<br><code>ping xjt927.github.io</code>，得到地址为<code>151.101.229.147</code>。</li><li><p>登录阿里云找到“云解析DNS”，找到自己的域名点击后面的“解析设置”，首次进入会默认配置，如果没有特殊用处可以全部删除。点击右上角“添加解析”，添加两条记录如下：<br><img src="https://github.com/xjt927/filerepository/blob/master/%7B@($F$%7DDU2TXV7HT%25O(9%5B)U.png?raw=true" width="700"> </p></li><li><p>等几分钟尝试打开自己的域名，自动跳转到github pages页面，到这里就成功了。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先要有自己的域名，没有域名的可以去&lt;a href=&quot;https://wanwang.aliyun.com/domain/?spm=5176.200001.n2.14.nkOQu9&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阿里云（万网）&lt;/a&gt;、&lt;a href=&quot;https://www.godaddy.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;godaddy&lt;/a&gt;上买，我在阿里云买的，比较实力比较强，也用阿里云的服务器。&lt;/p&gt;
&lt;h2 id=&quot;一、Github、hexo配置&quot;&gt;&lt;a href=&quot;#一、Github、hexo配置&quot; class=&quot;headerlink&quot; title=&quot;一、Github、hexo配置&quot;&gt;&lt;/a&gt;一、Github、hexo配置&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在github中找到自己的博客仓库，点击“Create new file”新建文件“CNAME”，注意文件名一定要大写，里面只写一行自己域名，域名前不要加http、www。&lt;br&gt;&lt;img src=&quot;https://github.com/xjt927/filerepository/blob/master/0~%60JL6F%606J067_5BUPTJMO1.png?raw=true&quot; width=&quot;700&quot;&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在本地hexo-&amp;gt;source文件夹下，新建文本文件“CNAME”，同样名称大写，里面只加一行自己的域名，规则同上，域名前不要加http、www。&lt;br&gt;这样做是因为，当使用&lt;code&gt;hexo d&lt;/code&gt;推送到github上的时候会自动将github上的“CNAME”文件覆盖、删除掉，导致域名解析失败。&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://xuejiangtao.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://xuejiangtao.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo入门教程（四）-hexo部署到Github</title>
    <link href="http://xuejiangtao.com//posts/30e46490/"/>
    <id>http://xuejiangtao.com//posts/30e46490/</id>
    <published>2018-04-18T07:54:18.000Z</published>
    <updated>2018-05-02T12:18:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Github-Pages设置"><a href="#Github-Pages设置" class="headerlink" title="Github Pages设置"></a>Github Pages设置</h2><h3 id="什么是Github-Pages"><a href="#什么是Github-Pages" class="headerlink" title="什么是Github Pages"></a>什么是Github Pages</h3><ul><li><p>Github Pages 是 github 公司提供的免费的静态网站托管服务，用起来方便而且功能强大，不仅没有空间限制，还可以绑定自己的域名。在 <a href="https://pages.github.com/" target="_blank" rel="noopener">https://pages.github.com/</a> 首页上可以看到很多用 Github Pages 托管的网站，很漂亮。另外很多非常著名的公司和项目也都用这种方式来搭建网站，如<a href="http://microsoft.github.io/" target="_blank" rel="noopener">微软</a>和 <a href="http://twitter.github.io/" target="_blank" rel="noopener">twitter</a> 的网站，还有 谷歌的 <a href="http://google.github.io/material-design-icons/" target="_blank" rel="noopener">Material Design</a> 图标 网站。</p></li><li><p>每个帐号只能有一个仓库来存放个人主页，而且仓库的名字必须是username/username.github.io，这是特殊的命名约定。你可以通过<a href="http://username.github.io" target="_blank" rel="noopener">http://username.github.io</a> 来访问你的个人主页。</p></li><li><p>每一个github账户最多只能创建一个，这样可以直接使用域名访问仓库。</p></li><li><p><strong>这里特别提醒一下，需要注意的个人主页的网站内容是在master分支下的。</strong></p><a id="more"></a><h2 id="Github-Pages优缺点"><a href="#Github-Pages优缺点" class="headerlink" title="Github Pages优缺点"></a>Github Pages优缺点</h2></li></ul><ul><li>Github Pages优点：<ul><li>轻量级的博客系统，没有麻烦的配置</li><li>使用标记语言，比如Markdown</li><li>无需自己搭建服务器</li><li>根据Github的限制，对应的每个站有300MB空间</li><li>可以绑定自己的域名</li></ul></li><li>Github Pages缺点：<ul><li>使用Jekyll模板系统，相当于静态页发布，适合博客，文档介绍等。</li><li>动态程序的部分相当局限，比如没有评论，不过还好我们有解决方案。</li><li>基于Git，很多东西需要动手，不像Wordpress有强大的后台。</li></ul></li></ul><h2 id="创建自己的Github-Pages"><a href="#创建自己的Github-Pages" class="headerlink" title="创建自己的Github Pages"></a>创建自己的Github Pages</h2><h3 id="注册-GitHub"><a href="#注册-GitHub" class="headerlink" title="注册 GitHub"></a>注册 GitHub</h3><p>访问：<a href="http://www.github.com/" target="_blank" rel="noopener">http://www.github.com/</a></p><p>注册你的 username 和邮箱，邮箱十分重要，GitHub 上很多通知都是通过邮箱发送。</p><p>注册过程比较简单，详细也可以看：</p><p><a href="https://link.jianshu.com/?t=http://www.pchou.info/ssgithubPage/2013-01-03-build-github-blog-page-01.html" target="_blank" rel="noopener">一步步在 GitHub上创建博客主页</a> 全系列 by pchou（推荐）</p><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>新建一个名为你的用户名.github.io的仓库，比如说，如果你的github用户名是test，那么你就新建test.github.io的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 <a href="http://test.github.io" target="_blank" rel="noopener">http://test.github.io</a> 了，是不是很方便？</p><ul><li>几个注意的地方：</li></ul><ul><li>注册的邮箱一定要验证，否则不会成功；</li><li>仓库名字必须是：username.github.io，其中username是你的用户名；</li></ul><p>创建成功后，以后你的博客所有代码都是放在这个仓库里啦。</p><h2 id="创建SSH-Key"><a href="#创建SSH-Key" class="headerlink" title="创建SSH Key"></a>创建SSH Key</h2><p>在windows系统下进入c盘，右键点击“Git Bash Here”，然后输入命令。<br><img src="https://github.com/xjt927/filerepository/blob/master/NM2$$_U77%7BFJPY@QKE%28KC%25W.png?raw=true" width="700"> </p><ol><li><p>检查SSH keys的设置<br>首先我们需要检查你电脑上现有的ssh key：<br><code>$ cd ~/.ssh</code><br>如果显示“No such file or directory”，跳到第三步，否则继续。</p></li><li><p>备份和移除原来的ssh key设置：<br>因为已经存在key文件，所以需要备份旧的数据并删除：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">configid_rsaid_rsa.pubknown_hosts</span><br><span class="line">$ mkdir key_backup</span><br><span class="line">$ cp id_rsa* key_backup</span><br><span class="line">$ rm id_rsa*</span><br></pre></td></tr></table></figure></li><li><p>生成新的SSH Key：<br>输入下面的代码，你的邮箱地址，就可以生成新的key文件，我们只需要默认设置就好，所以当需要输入文件名的时候，回车就好。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br></pre></td></tr></table></figure></li></ol><p>输入命令回车后出现以下信息，直接回车：<br>Generating public/private rsa key pair.<br>Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;直接回车&gt;</p><ul><li>注意 1: 此处的邮箱地址，你可以输入自己的邮箱地址；</li><li>注意 2: 此处的「-C」的是大写的「C」</li></ul><p>然后系统会要你输入加密串（Passphrase），不想设置的默认回车就行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase):&lt;输入加密串&gt;</span><br><span class="line">Enter same passphrase again:&lt;再次输入加密串&gt;</span><br></pre></td></tr></table></figure></p><p>这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。</p><ul><li>注意：输入密码的时候没有 * 字样的，你直接输入就可以了。</li></ul><p><strong>生成.ssh文件中id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥。</strong></p><h2 id="添加SSH-Key到GitHub："><a href="#添加SSH-Key到GitHub：" class="headerlink" title="添加SSH Key到GitHub："></a>添加SSH Key到GitHub：</h2><p>在本机设置 SSH Key 之后，需要添加到 GitHub上，以完成 SSH 链接的设置。</p><ul><li><p>1、打开本地 id_rsa.pub 文件（ 参考地址 C:\Documents and Settings\Administrator.ssh\id_rsa.pub）。此文件里面内容为刚才生成的密钥。如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。</p></li><li><p>2、登陆 GitHub 系统。点击右上角的 Account Settings—&gt;SSH and GPG keys —&gt; New SSH key </p></li><li><p>3、把你本地生成的密钥复制到里面（ key 文本框中）， 点击 Add SSH key 就ok了</p></li><li><p>4、添加 SSH Key 到 GitHub</p></li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>可以输入下面的命令，看看设置是否成功，<a href="mailto:`git@GitHub.com" target="_blank" rel="noopener">`git@GitHub.com</a>` 的部分不要修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@GitHub.com</span><br></pre></td></tr></table></figure></p><p>如果是下面的反馈：</p><blockquote><p>The authenticity of host ‘GitHub.com (207.97.227.239)’ can’t be established.<br>RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.<br>Are you sure you want to continue connecting (yes/no)?</p></blockquote><p>不要紧张，输入 yes 就好，然后会看到：</p><blockquote><p>Hi userName! You’ve successfully authenticated, but GitHub does not provide shell access.</p></blockquote><p>设置用户信息<br>现在你已经可以通过 SSH 链接到 GitHub 了，还有一些个人信息需要完善的。</p><p>Git 会根据用户的名字和邮箱来记录提交。GitHub 也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字必须是你的真名，而不是GitHub的昵称。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name &quot;userName&quot;//用户名</span><br><span class="line">$ git config --global user.email &quot;youremail@example.com&quot;//填写自己的邮箱</span><br></pre></td></tr></table></figure></p><p>SSH Key 配置成功<br>本机已成功连接到 GitHub。</p><p>若有问题，请重新设置。常见错误请参考：<br><a href="https://link.jianshu.com/?t=http://help.GitHub.com/articles/generating-ssh-keys" target="_blank" rel="noopener">GitHub Help - Generating SSH Keys</a><br><a href="https://link.jianshu.com/?t=http://help.GitHub.com/articles/error-permission-denied-publickey" target="_blank" rel="noopener">GitHub Help - Error Permission denied (publickey)</a></p><h2 id="上传到Github"><a href="#上传到Github" class="headerlink" title="上传到Github"></a>上传到Github</h2><p>参考官方文档 <a href="https://hexo.io/zh-cn/docs/deployment.html" target="_blank" rel="noopener">部署</a></p><ul><li>配置站点配置文件<br>打开根目录下站点配置文件_config.yml，配置有关deploy的部分：<br><img src="https://github.com/xjt927/filerepository/blob/master/%25(AVBOX(1$26WIAW65%5DIEK2.png?raw=true" width="300"></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:xjt927/xjt927.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><ul><li>安装插件<br>此时，直接使用<code>hexo d</code>部署到github，将出现如下错误：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR Deployer not found: git</span><br></pre></td></tr></table></figure></li></ul><p>这是因为需要安装如下插件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><ul><li>部署到github</li></ul><p><strong>注意：</strong></p><ul><li>如果安装git客户端的时候没有勾选git命令在bash和cmd命令都有效，若是在cmd命令下则因为没有将git添加到windows的path，所以会出现错误，<strong>一般可以尝试在blog的目录右键选<code>Git Bath here</code>再尝试<code>hexo d</code></strong>。</li><li><p>执行<code>hexo d</code>后报错：fatal: Not a git repository (or any of the parent directories): .git<br><img src="https://github.com/xjt927/filerepository/blob/master/7$FB2LS2Z4~RHASZ4EI3IMQ.png?raw=true" width="300"><br><strong>解决：</strong> 把hexo文件夹下的<code>.deploy_git</code>文件夹删掉，重新编译、发布。</p></li><li><p><code>hexo d</code>之后等运行完毕，打开github仓库看到文件已经推送过来了，这时打开https://你的用户名.github.io/，会发现新写的文章已经生成，则表示部署到github成功。</p></li></ul><h2 id="hexo主题设置"><a href="#hexo主题设置" class="headerlink" title="hexo主题设置"></a>hexo主题设置</h2><p><a href="https://hexo.io/zh-cn/docs/themes.html" target="_blank" rel="noopener">hexo官方主题文档</a>中介绍了怎样创建主题，并给出了<a href="https://hexo.io/themes/" target="_blank" rel="noopener">hexo主题列表</a>，从中挑选喜欢的主题。对于前端不熟的我，只能参考使用现成的主题了，这是我使用一套的主题——<a href="https://github.com/Tomotoes/hexo-theme-tomotoes" target="_blank" rel="noopener">hexo-theme-tomotoes</a>，记录一下使用步骤。</p><ol><li><a href="https://github.com/Tomotoes/hexo-theme-tomotoes/wiki/%E5%AE%89%E8%A3%85" target="_blank" rel="noopener">安装</a></li><li><a href="https://github.com/Tomotoes/hexo-theme-tomotoes/wiki/%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">配置</a></li><li><p>在参考<a href="https://github.com/Tomotoes/hexo-theme-tomotoes/wiki/%E5%AE%89%E8%A3%85" target="_blank" rel="noopener">安装</a>配置“标签页”，“分类页”，“关于页”的设置时，将其给出的配置放到文件头三道杠“—”中间，可以是“date”下面位置。如about页面的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: about</span><br><span class="line">date: 2018-04-18 14:54:10</span><br><span class="line">layout: about</span><br><span class="line">comments: true</span><br><span class="line">reward: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li><li><p>在设置“themes\tomotoes\_config.yml”主题配置文件时，文章截断要设置为<code>excerpt_render: false</code>，才能在首页截断文章。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mymotto: #关闭一言将true和false都清空即可</span><br><span class="line"> content: Just Do It!</span><br></pre></td></tr></table></figure></li><li><p>新建文章之后，在文件头部写上<code>tags</code>、<code>categories</code>字段，分别对应网站的<code>标签</code>、<code>分类</code>菜单列表，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: test</span><br><span class="line">abbrlink: d87f7e0c</span><br><span class="line">date: 2018-04-18 15:51:18</span><br><span class="line">tags: 测试标签</span><br><span class="line">categories: 测试分类</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li><li><p>设置完成后使用<code>hexo c</code>、<code>hexo g</code>等命令，如果报如下错误，说明在配置文件<code>_config.yml</code>的87行前面有空格，删掉空格即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FATAL bad indentation of a mapping entry at line 87, column 2:</span><br><span class="line">     feed:</span><br><span class="line">     ^</span><br></pre></td></tr></table></figure></li><li><p>打开“themes\tomotoes\layout\_partial\post\updated.ejs”，修改<code>(&#39;post.last_updated&#39;)</code>为<code>(&#39;最后更新：&#39;)</code>，用于文章下面的提示信息。</p></li><li><p>打开“themes\tomotoes\layout\_partial\index-item.ejs”第21行处，将<code>&lt;%= __(&#39;post.continue_reading&#39;) %&gt;</code>设置为<code>&lt;%= __(&#39;全文阅读&#39;) %&gt;</code>。</p></li></ol><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><ol><li><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官方文档</a></li><li><a href="https://www.jianshu.com/p/05289a4bc8b2" target="_blank" rel="noopener">如何搭建一个独立博客——简明Github Pages与Hexo教程</a></li><li><a href="https://baoyuzhang.github.io/2017/05/12/%E3%80%90Hexo%E6%90%AD%E5%BB%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2%E5%85%A8%E7%BA%AA%E5%BD%95%E3%80%91%EF%BC%88%E4%B8%89%EF%BC%89%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">【Hexo搭建独立博客全纪录】（三）使用Hexo搭建博客</a></li><li><a href="http://blog.haoji.me/build-blog-website-by-hexo-github.html?from=xa" target="_blank" rel="noopener">使用hexo+github搭建免费个人博客详细教程</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Github-Pages设置&quot;&gt;&lt;a href=&quot;#Github-Pages设置&quot; class=&quot;headerlink&quot; title=&quot;Github Pages设置&quot;&gt;&lt;/a&gt;Github Pages设置&lt;/h2&gt;&lt;h3 id=&quot;什么是Github-Pages&quot;&gt;&lt;a href=&quot;#什么是Github-Pages&quot; class=&quot;headerlink&quot; title=&quot;什么是Github Pages&quot;&gt;&lt;/a&gt;什么是Github Pages&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Github Pages 是 github 公司提供的免费的静态网站托管服务，用起来方便而且功能强大，不仅没有空间限制，还可以绑定自己的域名。在 &lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pages.github.com/&lt;/a&gt; 首页上可以看到很多用 Github Pages 托管的网站，很漂亮。另外很多非常著名的公司和项目也都用这种方式来搭建网站，如&lt;a href=&quot;http://microsoft.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;微软&lt;/a&gt;和 &lt;a href=&quot;http://twitter.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;twitter&lt;/a&gt; 的网站，还有 谷歌的 &lt;a href=&quot;http://google.github.io/material-design-icons/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Material Design&lt;/a&gt; 图标 网站。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每个帐号只能有一个仓库来存放个人主页，而且仓库的名字必须是username/username.github.io，这是特殊的命名约定。你可以通过&lt;a href=&quot;http://username.github.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://username.github.io&lt;/a&gt; 来访问你的个人主页。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每一个github账户最多只能创建一个，这样可以直接使用域名访问仓库。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;这里特别提醒一下，需要注意的个人主页的网站内容是在master分支下的。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://xuejiangtao.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://xuejiangtao.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo入门教程（三）-hexo新建文章&amp;发布文章</title>
    <link href="http://xuejiangtao.com//posts/fbe5044a/"/>
    <id>http://xuejiangtao.com//posts/fbe5044a/</id>
    <published>2018-04-18T07:53:18.000Z</published>
    <updated>2018-05-02T12:17:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><p>使用cmd进入hexo网站按照目录下，在命令行中输入以下命令：</p><p><code>hexo new [layout] &lt;title&gt;</code></p><blockquote><p><strong>[layout]</strong> 为指定文章的布局（layout），默认为 <code>post</code>，可以通过修改 <code>_config.yml</code> 中的 <code>default_layout</code> 参数来指定默认布局。 </p></blockquote><blockquote><p><strong>[layout]</strong> 可以不用写，不写就是默认布局。<code>hexo new &lt;title&gt;</code> </p></blockquote><blockquote><p><strong><code>&lt;title&gt;</code></strong> 为你要创建的文章标题。</p></blockquote><p>之后在 <code>source/_posts</code> 目录下面，多了一个<code>&lt;title&gt;.md</code> 的文件。<br><a id="more"></a></p><h2 id="布局（Layout）"><a href="#布局（Layout）" class="headerlink" title="布局（Layout）"></a>布局（Layout）</h2><p>Hexo 有三种默认布局：<code>post、page</code> 和 <code>draft</code>，它们分别对应不同的路径，而您自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹。</p><table><thead><tr><th>布局</th><th>路径</th></tr></thead><tbody><tr><td>post</td><td>source/_posts</td><td></td></tr><tr><td>page</td><td>source</td></tr><tr><td>draft</td><td>source/_drafts</td></tr></tbody></table><h2 id="创建草稿"><a href="#创建草稿" class="headerlink" title="创建草稿"></a>创建草稿</h2><p>草稿文件的创建命令如下：</p><p><code>hexo new draft &lt;title&gt;</code></p><p>创建的文件会被保存到<code>source/_drafts</code>文件夹，如果有文章没写完或不想发布的，可以放到<code>drafts</code>文件夹下。</p><h2 id="预览草稿"><a href="#预览草稿" class="headerlink" title="预览草稿"></a>预览草稿</h2><p>草稿默认不会显示在页面中，有两种方式可以预览草稿。</p><ol><li>在执行 <code>hexo g</code> 命令时加上 <code>--draft</code> 参数。</li></ol><p><code>hexo s --draft</code></p><ol start="2"><li>在 <code>_config.yml</code> 文件中把 <code>render_drafts</code> 参数设为 <code>true</code> 。</li></ol><p><code>render_drafts: true</code></p><h2 id="草稿文章-转-发布文章"><a href="#草稿文章-转-发布文章" class="headerlink" title="草稿文章 转 发布文章"></a>草稿文章 转 发布文章</h2><p>使用 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹，该命令的使用方式与 new 十分类似，您也可在命令中指定 <code>layout</code> 来指定布局，草稿发布后<code>_drafts</code>目录下的草稿会同时删除。</p><p> <code>hexo publish [layout] &lt;title&gt;</code></p><p> Hexo没有提供将草稿全部发布到<code>_post</code>目录，可以使用<code>hexo publish .</code>来发布，不过偶尔报错。</p><h2 id="模版（Scaffold）"><a href="#模版（Scaffold）" class="headerlink" title="模版（Scaffold）"></a>模版（Scaffold）</h2><p>在新建文章时，Hexo 会根据 <code>scaffolds</code> 文件夹内相对应的文件来建立文件，例如：</p><p> <code>hexo new photo &quot;My Gallery&quot;</code></p><p>在执行这行指令时，Hexo 会尝试在 <code>scaffolds</code> 文件夹中寻找 <code>photo.md</code>，并根据其内容建立文章，以下是您可以在模版中使用的变量：</p><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td>layout</td><td>布局</td></tr><tr><td>title</td><td>标题</td></tr><tr><td>date</td><td>文件建立日期</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;新建文章&quot;&gt;&lt;a href=&quot;#新建文章&quot; class=&quot;headerlink&quot; title=&quot;新建文章&quot;&gt;&lt;/a&gt;新建文章&lt;/h2&gt;&lt;p&gt;使用cmd进入hexo网站按照目录下，在命令行中输入以下命令：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hexo new [layout] &amp;lt;title&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;[layout]&lt;/strong&gt; 为指定文章的布局（layout），默认为 &lt;code&gt;post&lt;/code&gt;，可以通过修改 &lt;code&gt;_config.yml&lt;/code&gt; 中的 &lt;code&gt;default_layout&lt;/code&gt; 参数来指定默认布局。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;[layout]&lt;/strong&gt; 可以不用写，不写就是默认布局。&lt;code&gt;hexo new &amp;lt;title&amp;gt;&lt;/code&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt;&lt;/strong&gt; 为你要创建的文章标题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;之后在 &lt;code&gt;source/_posts&lt;/code&gt; 目录下面，多了一个&lt;code&gt;&amp;lt;title&amp;gt;.md&lt;/code&gt; 的文件。&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://xuejiangtao.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://xuejiangtao.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo入门教程（二）-hexo网站目录机构介绍</title>
    <link href="http://xuejiangtao.com//posts/c0129f56/"/>
    <id>http://xuejiangtao.com//posts/c0129f56/</id>
    <published>2018-04-18T07:52:18.000Z</published>
    <updated>2018-05-02T12:17:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>继上一篇介绍hexo如何搭建，来了解一下hexo网站的目录结构。<br>.<br>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── _drafts<br>|   └── _posts<br>└── themes</p><p><strong>_config.yml</strong><br>网站的 <a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">配置</a> 信息，您可以在此配置大部分的参数。<br><a id="more"></a><br><strong>package.json</strong><br>应用程序的信息。</p><p><strong>scaffolds</strong><br><a href="https://hexo.io/zh-cn/docs/writing.html" target="_blank" rel="noopener">模版</a> 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</p><p>Hexo的模板是指在新建的markdown文件中默认填充的内容。例如，如果您修改scaffold/post.md中的Front-matter内容，那么每次新建一篇文章时都会包含这个修改。</p><p><strong>source</strong><br>资源文件夹是存放用户资源的地方。除 _posts 文件夹之外，开头命名为 _ (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。</p><p><strong>themes</strong><br><a href="https://hexo.io/zh-cn/docs/themes.html" target="_blank" rel="noopener">主题</a> 文件夹。Hexo 会根据主题来生成静态页面。</p><p><strong>public</strong><br>使用 <code>hexo g</code> 命令生成的静态页面文件。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;继上一篇介绍hexo如何搭建，来了解一下hexo网站的目录结构。&lt;br&gt;.&lt;br&gt;├── _config.yml&lt;br&gt;├── package.json&lt;br&gt;├── scaffolds&lt;br&gt;├── source&lt;br&gt;|   ├── _drafts&lt;br&gt;|   └── _posts&lt;br&gt;└── themes&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;&lt;br&gt;网站的 &lt;a href=&quot;https://hexo.io/zh-cn/docs/configuration.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;配置&lt;/a&gt; 信息，您可以在此配置大部分的参数。&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://xuejiangtao.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://xuejiangtao.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo入门教程（一）-hexo安装</title>
    <link href="http://xuejiangtao.com//posts/3523a191/"/>
    <id>http://xuejiangtao.com//posts/3523a191/</id>
    <published>2018-04-18T07:51:18.000Z</published>
    <updated>2018-05-02T12:19:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>hexo有<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">官方文档</a>，本文只记录自己搭建hexo博客的过程。</p><h4 id="先检查电脑是否安装NodeJs和Git"><a href="#先检查电脑是否安装NodeJs和Git" class="headerlink" title="先检查电脑是否安装NodeJs和Git"></a>先检查电脑是否安装NodeJs和Git</h4><ul><li><strong>查看nodejs</strong>：<br>node -v<br>npm -v</li><li><p><strong>检查git</strong><br>在文件夹空白处右键，如果出现以下图片表明安装成功。<br><img src="https://github.com/xjt927/filerepository/blob/master/20180207163420.jpg?raw=true" width="300"></p><a id="more"></a></li></ul><h5 id="安装NodeJs"><a href="#安装NodeJs" class="headerlink" title="安装NodeJs"></a>安装NodeJs</h5><p>下载并安装nodejs<br>官方下载地址：<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a><br><img src="https://github.com/xjt927/filerepository/blob/master/1517994916(1).jpg?raw=true" width="700"><br><br><br>中文下载地址：<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">http://nodejs.cn/download/</a><br><img src="https://github.com/xjt927/filerepository/blob/master/1517994824(1).jpg?raw=true" width="700"><br>具体nodejs安装可参考 <a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="noopener">Node.js 安装配置</a> </p><h5 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h5><p>下载并安装Git<br>下载地址 <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a><br>具体Git安装可参考 <a href="http://www.runoob.com/git/git-install-setup.html" target="_blank" rel="noopener">Git 安装配置</a> </p><h3 id="安装Hexo框架"><a href="#安装Hexo框架" class="headerlink" title="安装Hexo框架"></a>安装Hexo框架</h3><p>使用npm命令安装Hexo框架，进入cmd命令然后输入：<br><code>npm install -g hexo-cli</code></p><p><img src="https://github.com/xjt927/filerepository/blob/master/1523175254(1).jpg?raw=true" width="600"></p><h3 id="创建Hexo网站"><a href="#创建Hexo网站" class="headerlink" title="创建Hexo网站"></a>创建Hexo网站</h3><p>使用npm命令安装Hexo网站所需的文件，依次输入：<br><code>hexo init &lt;folder&gt;</code><br><code>cd &lt;folder&gt;</code><br><code>npm install</code> </p><p><code>&lt;folder&gt;</code> 为你要安装hexo的路径<br>如果没有设置 <code>folder</code> ，Hexo默认在目前的文件夹建立网站。<br><img src="https://github.com/xjt927/filerepository/blob/master/1523177024(1).jpg?raw=true" width="600"><br>新建完成后，指定文件夹的目录如下：<br>.<br>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── _drafts<br>|   └── _posts<br>└── themes  </p><p>到这里Hexo已经安装成功了，使用cmd命令cd进入刚才创建的hexo文件夹，分别执行以下命令：<br><code>hexo g</code><br><code>hexo c</code><br>命令简写<br><code>hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; #新建文章</code><br><code>hexo g == hexo generate #生成</code><br><code>hexo s == hexo server #启动服务预览</code><br><code>hexo d == hexo deploy #部署</code><br>完成后，打开浏览器输入地址：<br><a href="http://localhost:4000" target="_blank" rel="noopener">localhost:4000</a><br>可以看到默认网站样式<br><img src="https://github.com/xjt927/filerepository/blob/master/1523177767(1).jpg?raw=true" width="600"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hexo有&lt;a href=&quot;https://hexo.io/zh-cn/docs/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;，本文只记录自己搭建hexo博客的过程。&lt;/p&gt;
&lt;h4 id=&quot;先检查电脑是否安装NodeJs和Git&quot;&gt;&lt;a href=&quot;#先检查电脑是否安装NodeJs和Git&quot; class=&quot;headerlink&quot; title=&quot;先检查电脑是否安装NodeJs和Git&quot;&gt;&lt;/a&gt;先检查电脑是否安装NodeJs和Git&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;查看nodejs&lt;/strong&gt;：&lt;br&gt;node -v&lt;br&gt;npm -v&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;检查git&lt;/strong&gt;&lt;br&gt;在文件夹空白处右键，如果出现以下图片表明安装成功。&lt;br&gt;&lt;img src=&quot;https://github.com/xjt927/filerepository/blob/master/20180207163420.jpg?raw=true&quot; width=&quot;300&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://xuejiangtao.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://xuejiangtao.com/tags/hexo/"/>
    
  </entry>
  
</feed>
